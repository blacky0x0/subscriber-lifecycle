/*
 * This file is generated by jOOQ.
 */
package com.github.blacky.subscriber_lifecycle.jooq.tables.daos;


import com.github.blacky.subscriber_lifecycle.jooq.enums.Status;
import com.github.blacky.subscriber_lifecycle.jooq.tables.Subscriber;
import com.github.blacky.subscriber_lifecycle.jooq.tables.records.SubscriberRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SubscriberDao extends DAOImpl<SubscriberRecord, com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber, Long> {

    /**
     * Create a new SubscriberDao without any configuration
     */
    public SubscriberDao() {
        super(Subscriber.SUBSCRIBER, com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber.class);
    }

    /**
     * Create a new SubscriberDao with an attached configuration
     */
    @Autowired
    public SubscriberDao(Configuration configuration) {
        super(Subscriber.SUBSCRIBER, com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber.class, configuration);
    }

    @Override
    public Long getId(com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchById(Long... values) {
        return fetch(Subscriber.SUBSCRIBER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber fetchOneById(Long value) {
        return fetchOne(Subscriber.SUBSCRIBER.ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByFirstName(String... values) {
        return fetch(Subscriber.SUBSCRIBER.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByLastName(String... values) {
        return fetch(Subscriber.SUBSCRIBER.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>msisdn BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfMsisdn(String lowerInclusive, String upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.MSISDN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>msisdn IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByMsisdn(String... values) {
        return fetch(Subscriber.SUBSCRIBER.MSISDN, values);
    }

    /**
     * Fetch a unique record that has <code>msisdn = value</code>
     */
    public com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber fetchOneByMsisdn(String value) {
        return fetchOne(Subscriber.SUBSCRIBER.MSISDN, value);
    }

    /**
     * Fetch records that have <code>balance BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfBalance(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.BALANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>balance IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByBalance(Long... values) {
        return fetch(Subscriber.SUBSCRIBER.BALANCE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfStatus(Status lowerInclusive, Status upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByStatus(Status... values) {
        return fetch(Subscriber.SUBSCRIBER.STATUS, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfCreated(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByCreated(Timestamp... values) {
        return fetch(Subscriber.SUBSCRIBER.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchRangeOfUpdated(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Subscriber.SUBSCRIBER.UPDATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.github.blacky.subscriber_lifecycle.jooq.tables.pojos.Subscriber> fetchByUpdated(Timestamp... values) {
        return fetch(Subscriber.SUBSCRIBER.UPDATED, values);
    }
}
